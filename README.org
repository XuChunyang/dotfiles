#+TITLE: My Dotfiles in Org mode
#+CATEGORY: dotfiles

* Meta                                                             :dotfiles:

** How to use this file?

- To extract dotfiles (such as ~~/.bash_profile~) from this file, type
  ~C-c C-v t~ (~org-babel-tangle~) in Emacs.
- To propagate changes in dotfiles (such as ~~/.bash_profile~) to this
  file, type ~M-x org-babel-detangle~ in Emacs.

** TODO Safer tangle by preventing overriding or showing diff before overriding?

** TODO 生成 Comment Section Header？

举个 Lisp 的例子，我需要的是支持其它 Major Mode 的，比如 Bash，Conf 之类的。可以考虑用 Lisp 实现，然后用 Org src 半自动插入。

#+BEGIN_SRC emacs-lisp
  ;;*---------------------------------------------------------------------*/
  ;;*    User configuration ...                                           */
  ;;*---------------------------------------------------------------------*/
#+END_SRC

** TODO Support more tools
   - [ ] Git
   - [ ] SSH

** Resources

- [[https://dotfiles.github.io/][GitHub does dotfiles - dotfiles.github.io]]
- [[https://github.com/webpro/awesome-dotfiles][webpro/awesome-dotfiles: A curated list of dotfiles resources.]]
- [[https://github.com/mathiasbynens/dotfiles][mathiasbynens/dotfiles: .files, including ~/.macos — sensible hacker defaults for macOS]]

* Passwords                                                       :passwords:

To view and edit these passwords, type ~M-x org-encrypt-entries~.

** ~/.authinfo.gpg                                                    :crypt:
   :PROPERTIES:
   :header-args: :tangle ~/.authinfo.gpg :comments link :tangle-mode (identity #o600)
   :END:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

hQIMA+LcwErZWE+CAQ//WjN9Y4tVlTxF1yPpMwyBVhInkDpiv4pMGRT1YRDyJ/xl
e6UUUwF/WY+AsHxoEaehWbNxwL7ubvywxAuJ0WB5KHuzsvtir/Rv13lp2LPYHYJp
iDInWWzPMyhK/QB+Hdzhqx1hZax4XA+zAIMcylLOVaIw0shsKfQRKKAjjKK9NOp3
/LkniAx75gdz0ukW9Iolvsz9RAmvJeNURsuQvafV9RIYO8ja7PtFnzzaawC6mflj
i8jUUHGXUCijyTpbdK1D4+0nj7Hd2ezO4Tb7rWcSuqNdP6jvZMBNLPMAqL6irVRG
463Ty9RHAbvsRr3EIf8LK+xCutrV9SbSbtAIDx8WyMWw+rpv1ViIs2ojXMH9OWXP
Rq9PwOTcB+sHF0UJH1StZRjmu33fAGQTV1QlYJo9QBxCAlqMBhh8DRMLBH/8CAoH
28tAX5j+Gi7LnYm/jREZfhbCsOz8BXApgnP9+J8UoyajNKXbp0Vyou11Lx/Kaqng
+jZcrZP37y5tuzVzu9gapLtG16+SrsjYG1lWhRBBvRXskrkvNLcRoSYPiJfp4A6J
UTGnLARwzsxnWEb6k0Q0ALZZPjV+gK4hpVM2T/BsU05PSeJwGUlY6dKqzk2V9HoV
SW5AsPgMGv0+gQ3kgHyxiPvlWgPJ0jgIDr/nDTOpZPrjcQdY4hCfbCNaFMBx0ivS
wGIBLXiElwMWRD1kvLLhH8sjvcn6AlkUa9DRNXM0xn5aqqC1QxRWZgiNqdy4VqP9
QtvKcANBn5ZGGHK0wSDnceH7N4AN1eWBZrB8oRNPlfqjaRZyajIwm3pblDSsYbyL
bSuYqyIyxzXa5HfdKob2eH52zzv7Of4zeuMdkAMx9sv84VcloUIciLmbegd5haqT
DtdGo/bDwdUvERSUdlQeXvbNh+VSbP1yIYl3bsaIRILkokuW4hONZ7+4XXWMzyVX
I8h7BS3TSD4aiBtFf161uOItlVPqzN3Z4HEy/H/6mcEBrvD3LyEJUvNdTtC89emJ
GNnunL+cgZ+lJGmUQ0O9UMvJUThszv/iD/nALsRbTegPZnMM5ZtfynWvunKicYQE
hxyE7A==
=WYb4
-----END PGP MESSAGE-----

* Bash                                                                 :bash:
  :PROPERTIES:
  :header-args:bash: :tangle ~/.bash_profile :comments link
  :END:

** ~~/.bashrc~ vs ~~/.bash_profile~

   Don't use [[file:~/.bashrc][file:~/.bashrc]] to keep configuration, use
   [[file:~/.bash_profile][file:~/.bash_profile]] instead.

   #+BEGIN_SRC bash :tangle ~/.bashrc :comments link
   [ -n "$PS1" ] && source ~/.bash_profile
   #+END_SRC

** Helper

   #+BEGIN_SRC bash
     function source_maybe () {
         local file="$1"
         [ -r "$file" ] && [ -f "$file" ] && source "$file"
     }
   #+END_SRC

** Startup

   #+BEGIN_SRC bash
     # Add `~/bin` to the `$PATH`
     export PATH="$HOME/bin:$PATH"

     # Load the shell dotfiles, and then some:
     # * ~/.path can be used to extend `$PATH`.
     # * ~/.extra can be used for other settings you don’t want to commit.
     for file in ~/.{path,bash_prompt,exports,aliases,functions,extra}; do
         source_maybe "$file"
     done
     unset file
   #+END_SRC

** ~$PATH~ in [[file:~/.path][file:~/.path]]

   Here’s an example ~~/.path~ file that adds ~/usr/local/bin~ to the ~$PATH~:
   #+BEGIN_SRC bash :tangle no
   export PATH="/usr/local/bin:$PATH"
   #+END_SRC

** Prompt

   #+BEGIN_SRC bash
     # Looks like "~$ " in $HOME ("~" is in blue)
     PS1="\[\e[34m\]\w\[\e[m\]\\$ "
   #+END_SRC

** Other Environment variables in [[file:~/.exports][file:~/.exports]]

   #+BEGIN_SRC bash :tangle ~/.exports :comments link :shebang "#!/usr/bin/env bash" :tangle-mode (identity #o644)
     # Make Emacs the default editor.
     export EDITOR='emacsclient'
     export VISUAL='emacsclient'

     # Enable support of searching Chinese for Notmuch
     export XAPIAN_CJK_NGRAM=1
   #+END_SRC

** Aliases in [[file:~/.aliases][file:~/.aliases]]

   #+BEGIN_SRC bash :tangle ~/.aliases :comments link :shebang "#!/usr/bin/env bash" :tangle-mode (identity #o644)
     # Detect which `ls` flavor is in use
     if ls --color > /dev/null 2>&1; then # GNU `ls`
         colorflag="--color"
         export LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
     else # macOS `ls`
         colorflag="-G"
         export LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
     fi

     # List all files colorized in long format
     alias l="ls -lF ${colorflag}"

     # List all files colorized in long format, including dot files
     alias la="ls -laF ${colorflag}"

     # List only directories
     alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

     # Always use color output for `ls`
     alias ls="command ls ${colorflag}"

     # Enable aliases to be sudo’ed
     alias sudo='sudo '

     # Stopwatch
     alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

     # IP addresses
     alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
     alias localip="ipconfig getifaddr en0"
     alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

     # Reload the shell (i.e. invoke as a login shell)
     alias reload="exec $SHELL -l"

     # Print each PATH entry on a separate line
     alias path='echo -e ${PATH//:/\\n}'
   #+END_SRC

** Completion

   #+BEGIN_SRC bash
     # Add tab completion for many Bash commands (MacPorts)
     if [ -f /opt/local/etc/profile.d/bash_completion.sh ]; then
         . /opt/local/etc/profile.d/bash_completion.sh
     fi
   #+END_SRC

*** Personal bash completion in [[file:~/.bash_completion][file:~/.bash_completion]]

    #+BEGIN_SRC bash :tangle ~/.bash_completion :comments link
      eval "$(pandoc --bash-completion)"

      # Use a custom version: 1) enable git-ls-files 2) support the alias dotfiles
      # cp /usr/share/bash-completion/completions/git ~/.git-completion.bash
      source_maybe "~/.git-completion.bash"

      source_maybe "/Applications/Docker.app/Contents/Resources/etc/docker.bash-completion"

      _emacs ()
      {
          local cur prev opts
          COMPREPLY=()
          cur="${COMP_WORDS[COMP_CWORD]}"
          prev="${COMP_WORDS[COMP_CWORD-1]}"
          opts='--help --version -L --directory --l --load --script --daemon --debug-init -Q --reverse-video --no-desktop --no-window-system --batch --eval --funcall'

          case $prev in
              --help|--version)
                  return
                  ;;
              -L|--directory)
                  COMPREPLY=( $(compgen -d ${cur}) )
                  return
                  ;;
              -l|--load|--script)
                  COMPREPLY=( $(compgen -f ${cur}) )
                  return
                  ;;
          esac

          COMPREPLY=( $(compgen -f -W "${opts}" -- ${cur}) )
      }
      complete -F _emacs emacs

      _emacsclient ()
      {
          local cur prev opts
          COMPREPLY=()
          cur="${COMP_WORDS[COMP_CWORD]}"
          prev="${COMP_WORDS[COMP_CWORD-1]}"
          opts='
          --version
          --help
          --tty
          --create-frame
          --eval
          --no-wait
          --quiet
          --socket-name
          --server-file
          --alternate-editor
          '

          COMPREPLY=( $(compgen -f -W "${opts}" -- ${cur}) )
      }
      complete -F _emacsclient emacsclient
    #+END_SRC


** History

   The following settings of Bash history is copied from [[https://sanctum.geek.nz/arabesque/better-bash-history/][Better Bash history | Arabesque]].

   #+BEGIN_SRC bash
     # Append history instead of rewriting it
     shopt -s histappend

     # Allow a larger history file
     HISTFILESIZE=1000000
     HISTSIZE=1000000

     # Don’t store specific lines
     HISTCONTROL=ignoreboth
     HISTIGNORE='ls:bg:fg:history'

     # Record timestamps
     HISTTIMEFORMAT='%F %T '

     # Use one command per line
     shopt -s cmdhist

     # Store history immediately
     PROMPT_COMMAND='history -a'
   #+END_SRC

*** TODO Read [[https://sanctum.geek.nz/arabesque/better-bash-history/][Better Bash history | Arabesque]] again

** Change directory

   #+BEGIN_SRC bash
     # Enable some Bash 4 features when possible:
     # * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
     # * Recursive globbing, e.g. `echo **/*.txt`
     for option in autocd globstar; do
         shopt -s "$option" 2> /dev/null
     done
   #+END_SRC

   Setup [[https://github.com/rupa/z][rupa/z: z - jump around]]:

   #+BEGIN_SRC bash
     file=/opt/local/etc/profile.d/z.sh
     if [ -f "$file" ]; then
         source "$file"
     else
         echo "Can't source $file, install it at <https://github.com/rupa/z>"
     fi
     unset file
   #+END_SRC

** Emacs

   [[file:~/.emacs.d/misc/emacs.sh][file:~/.emacs.d/misc/emacs.sh]] includes shell functions to launch
   Emacs's functions (such as Magit and ~C-x C-f~) inside
   Shell/Terminal.

   #+BEGIN_SRC bash
     source ~/.emacs.d/misc/emacs.sh
   #+END_SRC

** Resources

*** Style Guides
    - [[https://google.github.io/styleguide/shell.xml][Google Shell Style Guide]]
    - [[https://github.com/bahamas10/bash-style-guide][bahamas10/bash-style-guide: A style guide for writing safe, predictable, and portable bash scripts (not sh!)]]

*** Guides
    - [[http://tldp.org/LDP/abs/html/][Advanced Bash-Scripting Guide]]
    - [[http://wiki.bash-hackers.org/start][The Bash Hackers Wiki {Bash Hackers Wiki}]]

*** Tools    
    - [[https://github.com/Bash-it/bash-it][Bash-it/bash-it: A community Bash framework.]]
    - [[https://github.com/koalaman/shellcheck][koalaman/shellcheck: ShellCheck, a static analysis tool for shell scripts]]
